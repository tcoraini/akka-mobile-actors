- Em RemoteClient, o valor default para READ_TIMEOUT no código (1) não bate com o do arquivo de configuração (10)
- Em RemoteClient, na definição dos Handlers, o ReadTimeoutHandler parece receber o argumento em milissegundos, onde deveria ser segundos.

- Em ActorRef.scala, no método postMessageToMailboxAndCreateFutureResultWithTimeout, tanto da classe RemoteActorRef quanto da classe LocalActorRef quando o ator é remoto, o valor de timeout recebido como parâmetro não é usado. Isso significa que será usado o valor de timeout do ator, e caso o cliente tenha passado um timeout da forma:
	ref.!!(msg,customTimeout)
esse novo timeout será desconsiderado.

- Em RemoteServer.scala, na função createRemoteRequestProtocolBuilder, o ator é registrado pelo UUID no servidor para seu HomeAddress, e então a função toRemoteActorRefProtocol é chamada, e nessa função novamente esse ator é registrado no servidor pelo UUID.

- A geração de UUID é feita na verdade pelo AspectWerkz. Notei 2 coisas:
  - O UUID leva em conta apenas o currentTimeInMillis(). Pode dar problema em várias máquinas?
  - O UUID gerado deveria ainda usar 7 bits com o número 85 ('U'), sendo 1010101, chamado de UUID_MAGIC no código do AspectWerkz. O UUID seria então esses 7 bits deslocados para a esquerda 56 posições + o currentTimeInMillis, que dá por volta de 40 bits. O número final seria algo do tipo:
  01010101 0000000000000000 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 UUID_MAGIC                          currentTimeInMillis()
   Porém, pelo menos na execução em Scala (não sei se em Java funciona), o que ocorre é que 'U' << 56 acaba utilizando um inteiro para efetuar o deslocamento, e portanto o resultado é diferente do esperado. O erro pode ser constatado facilmente fazendo Uuid.isValid(Uuid.newUuid), que retorna falso.
